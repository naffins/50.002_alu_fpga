module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    input custom_in[2][16], // External a, b input 
    input custom_alufn[6],  // External ALUFN input
    input io_dip[8],        // Switches to control autotester behaviour/enable behaviour. Only io_dip[3:0] is relevant
    output custom_out[16]   // External result output
  ) {
  
  sig rst;                  // reset signal
  
  // ALU module
  alu alu_module;
  
  // ALU autotester module
  autotester autotest(.clk(clk),.rst(rst));
 
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;        // loop serial port
    
    // Connect io_dip[2:0] to autotester to control its behaviour
    autotest.switches = io_dip[2:0];
    
    // Switch between manual and auto testing mode
    case (io_dip[0]){
      
      // Manual
      1b0:
        
        // Set ALU inputs to external
        alu_module.a = custom_in[0];
        alu_module.b = custom_in[1];
        alu_module.alufn = custom_alufn;
        
        // Set ALU outputs to be displayed on LED: io_led[2:1] displays result, io_led[0][2:0] displays ZVN
        io_led[2] = alu_module.out[15:8];
        io_led[1] = alu_module.out[7:0];
        io_led[0][7:3] = 5b00000;
        io_led[0][2] = alu_module.z;
        io_led[0][1] = alu_module.v;
        io_led[0][0] = alu_module.n;
        
        // Set autotester inputs to 0
        autotest.result = 16h0000;
        autotest.z = 1b0;
        autotest.v = 1b0;
        autotest.n = 1b0;
        
        // Set external output to be from ALU
        custom_out = alu_module.out;
      
      // Autotest
      1b1:
        
        // Set ALU inputs to autotester output
        alu_module.a = autotest.a;
        alu_module.b = autotest.b;
        alu_module.alufn = autotest.alufn;
        
        // Set LED output from autotester
        io_led[2] = autotest.led[23:16];
        io_led[1] = autotest.led[15:8];
        io_led[0] = autotest.led[7:0];
        
        // Set autotester to get ALU output or dummy 0 output depending on io_dip[3]
        case(io_dip[3]){
          
          // Normal autotesting
          1b0:
            autotest.result = alu_module.out;
            autotest.z = alu_module.z;
            autotest.v = alu_module.v;
            autotest.n = alu_module.n;
          
          // Provide dummy zero results
          1b1:
            autotest.result = 16h0000;
            autotest.z = 1b0;
            autotest.v = 1b0;
            autotest.n = 1b0;
          
          // Default: Normal autotesting
          default:
            autotest.result = alu_module.out;
            autotest.z = alu_module.z;
            autotest.v = alu_module.v;
            autotest.n = alu_module.n;
        
        }
        
        // Set external output to be 0
        custom_out = 16h0000;
      
      // Default: manual
      default:
      
        // Set ALU inputs to external
        alu_module.a = custom_in[0];
        alu_module.b = custom_in[1];
        alu_module.alufn = custom_alufn;
        
        // Set ALU outputs to be displayed on LED: io_led[2:1] displays result, io_led[0][2:0] displays ZVN
        io_led[2] = alu_module.out[15:8];
        io_led[1] = alu_module.out[7:0];
        io_led[0][7:3] = 5b00000;
        io_led[0][2] = alu_module.z;
        io_led[0][1] = alu_module.v;
        io_led[0][0] = alu_module.n;
        
        // Set autotester inputs to 0
        autotest.result = 16h0000;
        autotest.z = 1b0;
        autotest.v = 1b0;
        autotest.n = 1b0;
        
        // Set external output to be from ALU
        custom_out = alu_module.out;
    }
    
    
    
    
    
    
  }
}