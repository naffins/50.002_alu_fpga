/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     TEST_CASES = {c{6h0,16h0000,16h0000,16h0000,1b1,1b0,1b0},c{6h1,16h0000,16h0000,16h0000,1b1,1b0,1b0},c{6h1,16h0AFA,16hCCCC,16h3E2E,1b0,1b0,1b0},c{6h1,16hCCCC,16h0AFA,16hC1D2,1b0,1b0,1b1},c{6h0,16h0AFA,16hCCCC,16hD7C6,1b0,1b0,1b1},c{6h1,16h6DA1,16hAC44,16hC15D,1b0,1b1,1b1},c{6h0,16hAC44,16h8CEA,16h392E,1b0,1b1,1b0},c{6h2,16h0000,16h0000,16h0000,1b1,1b0,1b0},c{6h2,16hFFFF,16hFFFF,16h0001,1b0,1b0,1b1},c{6h2,16h7EE3,16h143E,16h76FA,1b0,1b1,1b1},c{6h2,16h143E,16h7EE3,16h76FA,1b0,1b1,1b1},c{6h2,16h7FFF,16h7FFF,16h0001,1b0,1b1,1b1},c{6h18,16h5F46,16h13EB,16h1342,1b0,1b0,1b0},c{6h18,16h13EB,16hA63B,16h022B,1b0,1b0,1b1},c{6h18,16hA63B,16h13EB,16h022B,1b0,1b0,1b1},c{6h1E,16h4871,16hF85E,16hF87F,1b0,1b0,1b0},c{6h1E,16hF85E,16h2173,16hF97F,1b0,1b0,1b0},c{6h1E,16h2173,16hFDBA,16hFDFB,1b0,1b0,1b0},c{6h16,16hFDBA,16h3CFF,16hC145,1b0,1b0,1b0},c{6h16,16h3CFF,16h844C,16hB8B3,1b0,1b0,1b1},c{6h16,16h844C,16hE997,16h6DDB,1b0,1b1,1b0},c{6h1A,16hE997,16hC4A6,16hE997,1b0,1b0,1b1},c{6h1A,16hC4A6,16hB798,16hC4A6,1b0,1b1,1b0},c{6h1A,16hB798,16hC4A6,16hB798,1b0,1b1,1b0},c{6h20,16h593A,16h47FE,16h8000,1b0,1b1,1b1},c{6h20,16h47FE,16hD73C,16hE000,1b0,1b0,1b0},c{6h20,16hD73C,16h755E,16h0000,1b0,1b0,1b0},c{6h21,16h755E,16hCFDC,16h0007,1b0,1b1,1b1},c{6h21,16hCFDC,16h94E2,16h33F7,1b0,1b0,1b0},c{6h21,16h94E2,16hB365,16h04A7,1b0,1b0,1b1},c{6h23,16hB365,16hDD69,16hFFD9,1b0,1b0,1b1},c{6h23,16hDD69,16h40F3,16hFBAD,1b0,1b0,1b1},c{6h23,16h40F3,16h593A,16h0010,1b0,1b0,1b1},c{6h28,16h2801,16h6D93,16h0000,1b0,1b1,1b1},c{6h28,16h6571,16h5E2F,16h0001,1b0,1b1,1b1},c{6h28,16h6571,16h0001,16h6571,1b0,1b0,1b0},c{6h28,16h6571,16hFFFF,16h9A8F,1b0,1b0,1b0},c{6h28,16h0000,16h0001,16h0000,1b0,1b0,1b0},c{6h28,16h0000,16hFFFF,16h0000,1b0,1b0,1b1},c{6h28,16hFFFF,16hFFFF,16h0001,1b0,1b0,1b1},c{6h28,16h0001,16h0001,16h0001,1b0,1b0,1b0},c{6h28,16h0001,16hFFFF,16hFFFF,1b1,1b0,1b0},c{6h28,16hFFFF,16h0001,16hFFFF,1b1,1b0,1b0},c{6h28,16hFE0F,16hE0D8,16h0000,1b0,1b0,1b1},c{6h28,16h5E20,16h0661,16h000E,1b0,1b0,1b0},c{6h28,16h8000,16hE0D8,16h0004,1b0,1b1,1b0},c{6h28,16h8000,16h0001,16h8000,1b0,1b0,1b1},c{6h28,16h8000,16h8000,16h0001,1b1,1b1,1b0},c{6h28,16h8000,16hFFFF,16h8000,1b0,1b1,1b0},c{6h33,16h0000,16h0000,16h0001,1b1,1b0,1b0},c{6h35,16h0000,16h0000,16h0000,1b1,1b0,1b0},c{6h37,16h0000,16h0000,16h0001,1b1,1b0,1b0},c{6h33,16h0AFA,16hCCCC,16h0000,1b0,1b0,1b0},c{6h35,16h0AFA,16hCCCC,16h0000,1b0,1b0,1b0},c{6h37,16h0AFA,16hCCCC,16h0000,1b0,1b0,1b0},c{6h33,16h8000,16h8000,16h0001,1b1,1b0,1b0},c{6h35,16h8000,16h8000,16h0000,1b1,1b0,1b0},c{6h37,16h8000,16h8000,16h0001,1b1,1b0,1b0},c{6h33,16h6DA1,16hAC44,16h0000,1b0,1b1,1b1},c{6h35,16h6DA1,16hAC44,16h0000,1b0,1b1,1b1},c{6h37,16h6DA1,16hAC44,16h0000,1b0,1b1,1b1},c{6h33,16h8CEA,16hBA88,16h0000,1b0,1b0,1b1},c{6h35,16h8CEA,16hBA88,16h0001,1b0,1b0,1b1},c{6h37,16h8CEA,16hBA88,16h0001,1b0,1b0,1b1}}
*/
module autotester_2 (
    input clk,
    input rst,
    input [15:0] result,
    input z,
    input v,
    input n,
    input [2:0] switches,
    output reg [5:0] alufn,
    output reg [15:0] a,
    output reg [15:0] b,
    output reg [23:0] led
  );
  
  localparam TEST_CASES = 3648'h0000000000000202000000000001010afacccc3e2e00e666057d60e91002beb33335f1882db43588982bac0ac448cea392e4100000000000040bfffffffc000484fdc6287cedf4c2143e7ee376fa613fffbfff8000b617d184fac4d083027d74c76045658a63b13eb022b2f2438fc2f7c3f87be17885cfe5fc3c42e7fb75fbf616fdba3cffc1450b1e7fc2265c5995a1133a65db76d35d32f894dd32e5ac4a6b798c4a64d5bcc62535bcc28164e91ffa0001c08ffdae79c00020d73c755e000010baaf67ee0003b873f725388cfdc4329c566ca094e63b365dd69ffd931eeb4a079fdd698d03cd64e80040d05002db260000e865715e2f00017432b88000b2b88a195c7fffe6a3c50000000020000280000ffff0000347fffffff80009a0000400040004500003ffffffff28ffff0001ffff947f07f06c00001a1788019840038510001c1b00008a880000001800034400040000000ea20003fffe000166000000000003350000000000009b800000000000ccc2beb333000006a15f599980000370afacccc000019c00040000000cd60002000000026f000100000003336da1ac4400007ab6d0d62200003ddb686b1100001e719d575100000758ceaba8800013bc6755d4400009;
  
  
  wire [1-1:0] M_slowclock_value;
  counter_12 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  reg [5:0] M_state_d, M_state_q = 1'h0;
  
  wire [1-1:0] M_result_chk_result;
  reg [16-1:0] M_result_chk_a;
  reg [16-1:0] M_result_chk_b;
  equal16_13 result_chk (
    .a(M_result_chk_a),
    .b(M_result_chk_b),
    .result(M_result_chk_result)
  );
  
  wire [(5'h10+0)-1:0] M_led_select_out;
  reg [(5'h10+0)-1:0] M_led_select_inp0;
  reg [(5'h10+0)-1:0] M_led_select_inp1;
  reg [(5'h10+0)-1:0] M_led_select_inp2;
  reg [(5'h10+0)-1:0] M_led_select_inp3;
  reg [(5'h10+0)-1:0] M_led_select_s0;
  reg [(5'h10+0)-1:0] M_led_select_s1;
  
  genvar GEN_led_select0;
  generate
  for (GEN_led_select0=0;GEN_led_select0<5'h10;GEN_led_select0=GEN_led_select0+1) begin: led_select_gen_0
    mux4_4 led_select (
      .inp0(M_led_select_inp0[GEN_led_select0*(1)+(1)-1-:(1)]),
      .inp1(M_led_select_inp1[GEN_led_select0*(1)+(1)-1-:(1)]),
      .inp2(M_led_select_inp2[GEN_led_select0*(1)+(1)-1-:(1)]),
      .inp3(M_led_select_inp3[GEN_led_select0*(1)+(1)-1-:(1)]),
      .s0(M_led_select_s0[GEN_led_select0*(1)+(1)-1-:(1)]),
      .s1(M_led_select_s1[GEN_led_select0*(1)+(1)-1-:(1)]),
      .out(M_led_select_out[GEN_led_select0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [6-1:0] M_adder6_s;
  reg [6-1:0] M_adder6_a;
  reg [6-1:0] M_adder6_b;
  basic_add6_14 adder6 (
    .a(M_adder6_a),
    .b(M_adder6_b),
    .s(M_adder6_s)
  );
  
  reg [15:0] alufn_and_zvn;
  reg [15:0] out_a;
  reg [15:0] out_b;
  reg [15:0] in_result;
  
  reg result_correct;
  reg z_correct;
  reg v_correct;
  reg n_correct;
  
  always @* begin
    M_state_d = M_state_q;
    
    led[0+5-:6] = M_state_q;
    alufn_and_zvn[8+1-:2] = 2'h0;
    alufn_and_zvn[0+4-:5] = 5'h00;
    alufn_and_zvn[10+5-:6] = TEST_CASES[(M_state_q)*57+51+5-:6];
    out_a = TEST_CASES[(M_state_q)*57+35+15-:16];
    out_b = TEST_CASES[(M_state_q)*57+19+15-:16];
    alufn = TEST_CASES[(M_state_q)*57+51+5-:6];
    a = TEST_CASES[(M_state_q)*57+35+15-:16];
    b = TEST_CASES[(M_state_q)*57+19+15-:16];
    alufn_and_zvn[5+2-:3] = {z, v, n};
    in_result = result;
    M_result_chk_a = result;
    M_result_chk_b = TEST_CASES[(M_state_q)*57+3+15-:16];
    result_correct = M_result_chk_result;
    z_correct = ~(z ^ TEST_CASES[(M_state_q)*57+2+0-:1]);
    v_correct = ~(v ^ TEST_CASES[(M_state_q)*57+1+0-:1]);
    n_correct = ~(n ^ TEST_CASES[(M_state_q)*57+0+0-:1]);
    led[7+0-:1] = result_correct;
    led[6+0-:1] = z_correct & v_correct & n_correct;
    M_led_select_s0 = {5'h10{switches[1+0-:1]}};
    M_led_select_s1 = {5'h10{switches[2+0-:1]}};
    M_led_select_inp0 = alufn_and_zvn;
    M_led_select_inp1 = out_a;
    M_led_select_inp2 = out_b;
    M_led_select_inp3 = in_result;
    led[8+15-:16] = M_led_select_out;
    M_adder6_a = M_state_q;
    M_adder6_b[1+4-:5] = 5'h00;
    M_adder6_b[0+0-:1] = result_correct & z_correct & v_correct & n_correct & switches[0+0-:1];
    M_state_d = M_adder6_s;
  end
  
  always @(posedge M_slowclock_value) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
