/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    input [31:0] custom_in,
    input [5:0] custom_alufn,
    input [7:0] io_dip,
    output reg [15:0] custom_out
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_alu_module_out;
  wire [1-1:0] M_alu_module_z;
  wire [1-1:0] M_alu_module_v;
  wire [1-1:0] M_alu_module_n;
  reg [6-1:0] M_alu_module_alufn;
  reg [16-1:0] M_alu_module_a;
  reg [16-1:0] M_alu_module_b;
  alu_1 alu_module (
    .alufn(M_alu_module_alufn),
    .a(M_alu_module_a),
    .b(M_alu_module_b),
    .out(M_alu_module_out),
    .z(M_alu_module_z),
    .v(M_alu_module_v),
    .n(M_alu_module_n)
  );
  
  wire [6-1:0] M_autotest_alufn;
  wire [16-1:0] M_autotest_a;
  wire [16-1:0] M_autotest_b;
  wire [24-1:0] M_autotest_led;
  reg [16-1:0] M_autotest_result;
  reg [1-1:0] M_autotest_z;
  reg [1-1:0] M_autotest_v;
  reg [1-1:0] M_autotest_n;
  reg [3-1:0] M_autotest_switches;
  autotester_2 autotest (
    .clk(clk),
    .rst(rst),
    .result(M_autotest_result),
    .z(M_autotest_z),
    .v(M_autotest_v),
    .n(M_autotest_n),
    .switches(M_autotest_switches),
    .alufn(M_autotest_alufn),
    .a(M_autotest_a),
    .b(M_autotest_b),
    .led(M_autotest_led)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    M_autotest_switches = io_dip[0+2-:3];
    
    case (io_dip[0+0-:1])
      1'h0: begin
        M_alu_module_a = custom_in[0+15-:16];
        M_alu_module_b = custom_in[16+15-:16];
        M_alu_module_alufn = custom_alufn;
        io_led[16+7-:8] = M_alu_module_out[8+7-:8];
        io_led[8+7-:8] = M_alu_module_out[0+7-:8];
        io_led[0+3+4-:5] = io_dip[3+4-:5];
        io_led[0+2+0-:1] = M_alu_module_z;
        io_led[0+1+0-:1] = M_alu_module_v;
        io_led[0+0+0-:1] = M_alu_module_n;
        M_autotest_result = 16'h0000;
        M_autotest_z = 1'h0;
        M_autotest_v = 1'h0;
        M_autotest_n = 1'h0;
        custom_out = M_alu_module_out;
      end
      1'h1: begin
        M_alu_module_a = M_autotest_a;
        M_alu_module_b = M_autotest_b;
        M_alu_module_alufn = M_autotest_alufn;
        io_led[16+7-:8] = M_autotest_led[16+7-:8];
        io_led[8+7-:8] = M_autotest_led[8+7-:8];
        io_led[0+7-:8] = M_autotest_led[0+7-:8];
        M_autotest_result = M_alu_module_out;
        M_autotest_z = M_alu_module_z;
        M_autotest_v = M_alu_module_v;
        M_autotest_n = M_alu_module_n;
        custom_out = 16'h0000;
      end
      default: begin
        M_alu_module_a = custom_in[0+15-:16];
        M_alu_module_b = custom_in[16+15-:16];
        M_alu_module_alufn = custom_alufn;
        io_led[16+7-:8] = M_alu_module_out[8+7-:8];
        io_led[8+7-:8] = M_alu_module_out[0+7-:8];
        io_led[0+3+4-:5] = io_dip[3+4-:5];
        io_led[0+2+0-:1] = M_alu_module_z;
        io_led[0+1+0-:1] = M_alu_module_v;
        io_led[0+0+0-:1] = M_alu_module_n;
        M_autotest_result = 16'h0000;
        M_autotest_z = 1'h0;
        M_autotest_v = 1'h0;
        M_autotest_n = 1'h0;
        custom_out = M_alu_module_out;
      end
    endcase
  end
endmodule
