/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_1 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [(5'h10+0)-1:0] M_final_mux_out;
  reg [(5'h10+0)-1:0] M_final_mux_inp0;
  reg [(5'h10+0)-1:0] M_final_mux_inp1;
  reg [(5'h10+0)-1:0] M_final_mux_inp2;
  reg [(5'h10+0)-1:0] M_final_mux_inp3;
  
  genvar GEN_final_mux0;
  generate
  for (GEN_final_mux0=0;GEN_final_mux0<5'h10;GEN_final_mux0=GEN_final_mux0+1) begin: final_mux_gen_0
    mux4_4 final_mux (
      .s0(alufn[4+0-:1]),
      .s1(alufn[5+0-:1]),
      .inp0(M_final_mux_inp0[GEN_final_mux0*(1)+(1)-1-:(1)]),
      .inp1(M_final_mux_inp1[GEN_final_mux0*(1)+(1)-1-:(1)]),
      .inp2(M_final_mux_inp2[GEN_final_mux0*(1)+(1)-1-:(1)]),
      .inp3(M_final_mux_inp3[GEN_final_mux0*(1)+(1)-1-:(1)]),
      .out(M_final_mux_out[GEN_final_mux0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(5'h10+0)-1:0] M_add_mul_mux_out;
  reg [(5'h10+0)-1:0] M_add_mul_mux_inp0;
  reg [(5'h10+0)-1:0] M_add_mul_mux_inp1;
  
  genvar GEN_add_mul_mux0;
  generate
  for (GEN_add_mul_mux0=0;GEN_add_mul_mux0<5'h10;GEN_add_mul_mux0=GEN_add_mul_mux0+1) begin: add_mul_mux_gen_0
    mux2_5 add_mul_mux (
      .s0(alufn[1+0-:1]),
      .inp0(M_add_mul_mux_inp0[GEN_add_mul_mux0*(1)+(1)-1-:(1)]),
      .inp1(M_add_mul_mux_inp1[GEN_add_mul_mux0*(1)+(1)-1-:(1)]),
      .out(M_add_mul_mux_out[GEN_add_mul_mux0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(5'h10+0)-1:0] M_shift_div_mux_out;
  reg [(5'h10+0)-1:0] M_shift_div_mux_inp0;
  reg [(5'h10+0)-1:0] M_shift_div_mux_inp1;
  
  genvar GEN_shift_div_mux0;
  generate
  for (GEN_shift_div_mux0=0;GEN_shift_div_mux0<5'h10;GEN_shift_div_mux0=GEN_shift_div_mux0+1) begin: shift_div_mux_gen_0
    mux2_5 shift_div_mux (
      .s0(alufn[3+0-:1]),
      .inp0(M_shift_div_mux_inp0[GEN_shift_div_mux0*(1)+(1)-1-:(1)]),
      .inp1(M_shift_div_mux_inp1[GEN_shift_div_mux0*(1)+(1)-1-:(1)]),
      .out(M_shift_div_mux_out[GEN_shift_div_mux0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [16-1:0] M_adder16_mod_s;
  wire [1-1:0] M_adder16_mod_z;
  wire [1-1:0] M_adder16_mod_v;
  wire [1-1:0] M_adder16_mod_n;
  reg [6-1:0] M_adder16_mod_alufn;
  reg [16-1:0] M_adder16_mod_a;
  reg [16-1:0] M_adder16_mod_b;
  adder16_6 adder16_mod (
    .alufn(M_adder16_mod_alufn),
    .a(M_adder16_mod_a),
    .b(M_adder16_mod_b),
    .s(M_adder16_mod_s),
    .z(M_adder16_mod_z),
    .v(M_adder16_mod_v),
    .n(M_adder16_mod_n)
  );
  
  wire [16-1:0] M_multiplier16_mod_mult;
  reg [16-1:0] M_multiplier16_mod_a;
  reg [16-1:0] M_multiplier16_mod_b;
  multiplier16_7 multiplier16_mod (
    .a(M_multiplier16_mod_a),
    .b(M_multiplier16_mod_b),
    .mult(M_multiplier16_mod_mult)
  );
  
  wire [16-1:0] M_boolean16_mod_bool;
  reg [6-1:0] M_boolean16_mod_alufn;
  reg [16-1:0] M_boolean16_mod_a;
  reg [16-1:0] M_boolean16_mod_b;
  boolean16_8 boolean16_mod (
    .alufn(M_boolean16_mod_alufn),
    .a(M_boolean16_mod_a),
    .b(M_boolean16_mod_b),
    .bool(M_boolean16_mod_bool)
  );
  
  wire [16-1:0] M_shifter16_mod_shift;
  reg [6-1:0] M_shifter16_mod_alufn;
  reg [16-1:0] M_shifter16_mod_a;
  reg [16-1:0] M_shifter16_mod_b;
  shifter16_9 shifter16_mod (
    .alufn(M_shifter16_mod_alufn),
    .a(M_shifter16_mod_a),
    .b(M_shifter16_mod_b),
    .shift(M_shifter16_mod_shift)
  );
  
  wire [16-1:0] M_divider16_mod_div;
  reg [16-1:0] M_divider16_mod_a;
  reg [16-1:0] M_divider16_mod_b;
  divider16_10 divider16_mod (
    .a(M_divider16_mod_a),
    .b(M_divider16_mod_b),
    .div(M_divider16_mod_div)
  );
  
  wire [16-1:0] M_compare16_mod_cmp;
  reg [6-1:0] M_compare16_mod_alufn;
  reg [1-1:0] M_compare16_mod_z;
  reg [1-1:0] M_compare16_mod_v;
  reg [1-1:0] M_compare16_mod_n;
  compare16_11 compare16_mod (
    .alufn(M_compare16_mod_alufn),
    .z(M_compare16_mod_z),
    .v(M_compare16_mod_v),
    .n(M_compare16_mod_n),
    .cmp(M_compare16_mod_cmp)
  );
  
  always @* begin
    M_adder16_mod_alufn = alufn;
    M_adder16_mod_a = a;
    M_adder16_mod_b = b;
    M_add_mul_mux_inp0 = M_adder16_mod_s;
    M_multiplier16_mod_a = a;
    M_multiplier16_mod_b = b;
    M_add_mul_mux_inp1 = M_multiplier16_mod_mult;
    M_final_mux_inp0 = M_add_mul_mux_out;
    M_boolean16_mod_alufn = alufn;
    M_boolean16_mod_a = a;
    M_boolean16_mod_b = b;
    M_final_mux_inp1 = M_boolean16_mod_bool;
    M_shifter16_mod_alufn = alufn;
    M_shifter16_mod_a = a;
    M_shifter16_mod_b = b;
    M_shift_div_mux_inp0 = M_shifter16_mod_shift;
    M_divider16_mod_a = a;
    M_divider16_mod_b = b;
    M_shift_div_mux_inp1 = M_divider16_mod_div;
    M_final_mux_inp2 = M_shift_div_mux_out;
    M_compare16_mod_alufn = alufn;
    M_compare16_mod_z = M_adder16_mod_z;
    M_compare16_mod_v = M_adder16_mod_v;
    M_compare16_mod_n = M_adder16_mod_n;
    M_final_mux_inp3 = M_compare16_mod_cmp;
    out = M_final_mux_out;
    z = M_adder16_mod_z;
    v = M_adder16_mod_v;
    n = M_adder16_mod_n;
  end
endmodule
